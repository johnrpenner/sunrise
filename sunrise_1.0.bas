' SunRise 1.0 - By: johnPenner*ma*com - September 5, 2001'' Source:'         Almanac for Computers, 1990'         published by Nautical Almanac Office'         United States Naval Observatory'         Washington, DC 20392'' Inputs:'         day, month, year:      date of sunrise/sunset'         latitude, longitude:   location for sunrise/sunset'         zenith:                Sun's zenith for sunrise/sunset'           offical      = 90 degrees 50' (90.8333)'           civil        = 96 degrees'           nautical     = 102 degrees'           astronomical = 108 degrees''         NOTE: longitude is positive for East and negative for West'' Toronto: Lat = 43-39' N, Long = 79-20', Time = 5 hours.' Toronto: +43.65, -79.333' Define Constants'COMPILE ,_strResourcePi=3.14159265358979PiRads = Pi/180'Zenith = 90.833333Zenith = 96debug%=0Running%=1' Setup WindowWINDOW 1TEXT _applFont, 10, 0PRINT "SunRise Calculator - USNO Nautical Almanac 1990"PRINT "Zenith = Civil (96 degrees)PRINT'--| Define Functions |---' Since FutureBasic has no floor() function, we write it ourselves... :-PLOCAL FN floor(inValue)A = ABS(inValue) - FRAC(ABS(inValue))IF SGN(inValue)=_negValue THEN A=-(A+1)END FN = ALOCAL FN roundInt(A!)IF A!>0 THEN A!=INT(A!+0.5) ELSE A!=INT(A!-0.5)END FN = A!LOCAL FN fracMOD (numToMod, modNum)' Adjust into the range [0-360] by adding/subtracting 360modNum = ABS(modNum)LONG IF numToMod > 0WHILE numToMod > modNumnumToMod = numToMod - modNumWENDXELSEWHILE numToMod < -modNumnumToMod = numToMod + modNumWENDEND IFEND FN = numToModLOCAL FN arcSin(inValue)outValue = ATN(inValue / SQR(-inValue * inValue + 1))END FN = outValueLOCAL FN arcCos(inValue)outValue = ATN(-inValue / SQR(-inValue * inValue + 1)) + 2 * ATN(1)END FN = outValue'---| Main Programme |---DO' Input DataINPUT "Latitude, Longitude (in degrees): ";Latitude, LongitudeIF Latitude=0 AND Longitude=0 THEN Running%=0:GOTO "fred":'If Running%=0 then QuitINPUT "Time Zone (hours): ";localOffsetINPUT "Year, Month, Day: ";Year, Month, Day'Latitude=40.9 : Longitude=-74.3 : localOffset = -4 : Year = 1990 : Month = 6 : Day = 25GOSUB "CalcSunrise"GOSUB "DisplayResults"PRINT"fred"UNTIL Running%=0END"CalcSunrise"' Step 1. Calculate the day of the yearA = 275*Month/9 : N1 = FN floor(A)B = (Month+9)/12 : N2 = FN floor(B)C2 = FN floor(Year/4) : C1 = FN floor((Year - 4 * C2 + 2))N3 = (1 + C1 / 3)N = N1 - (N2 * N3) + Day - 30N = FN roundInt(N)IF debug%=1 THEN PRINT "Step 1:";N' Step 2. Convert Longitude to hour value and calc an approximate timelngHour = Longitude / 15tRising = N + ((6 - lngHour) / 24)tSetting = N + ((18 - lngHour) / 24)IF debug%=1 THEN PRINT "Step 2:";tRising, tSetting' Step 3. Calculate the Sun's Mean AnomalyMrising = (0.9856 * tRising) - 3.289Msetting = (0.9856 * tSetting) - 3.289IF debug%=1 THEN PRINT "Step 3:";Mrising' Step 4. Calculate the Sun's True Longitude' note: we need the *PiRads to convert from Degrees > RadiansLrising = Mrising + (1.916 * SIN(Mrising*PiRads)) + (0.020 * SIN(2 * Mrising*PiRads)) + 282.634Lsetting = Msetting + (1.916 * SIN(Msetting*PiRads)) + (0.020 * SIN(2 * Msetting*PiRads)) + 282.634' L needs to be normalized into the range [0-360]Lrising = FN fracMOD (Lrising, 360)Lsetting = FN fracMOD (Lsetting, 360)IF debug%=1 THEN PRINT "Step 4:";Lrising' Step 5a. Calculate the Sun's Right Ascension' note: we /PiRads to get Radians > DegreesTEMP1rising = TAN(Lrising*PiRads)TEMP1setting = TAN(Lsetting*PiRads)TEMP2rising = 0.91764 * TEMP1risingTEMP2setting = 0.91764 * TEMP1settingRArising = ATN(TEMP2rising) /PiRadsRAsetting = ATN(TEMP2setting) /PiRadsRArising = FN fracMOD (RArising, 360)RAsetting = FN fracMOD (RAsetting, 360)IF debug%=1 THEN PRINT "Step 5a:"; TEMP1rising, TEMP2rising, RArising' Step 5b. Right Ascension value needs to be in the same Quadrant as L(ongitude)Lquadrantrising = FN floor(Lrising/90) * 90RAquadrantrising = FN floor(RArising/90) * 90RArising = RArising + (Lquadrantrising - RAquadrantrising)Lquadrantsetting = FN floor(Lsetting/90) * 90RAquadrantsetting = FN floor(RAsetting/90) * 90RAsetting = RAsetting + (Lquadrantsetting - RAquadrantsetting)IF debug%=1 THEN PRINT "Step 5b:";RArising, RAsetting' Step 5c. Right Ascension value needs to be converted into hoursRArising = RArising / 15IF debug%=1 THEN PRINT "Step 5c:";RArising' Step 6. Calculate the Sun's DeclinationA = SIN(Lrising * PiRads)sinDECrising = 0.39782 * AB = FN arcSin(sinDECrising) / PiRadscosDECrising = COS(B * PiRads)IF debug%=1 THEN PRINT "Step 6:";sinDECrising, cosDECrising;A = SIN(Lsetting * PiRads)sinDECsetting = 0.39782 * AB = FN arcSin(sinDECsetting) / PiRadscosDECsetting = COS(B * PiRads)IF debug%=1 THEN PRINT sinDECsetting, cosDECsetting' Step 7a. Calculate the Sun's local hour anglecosHrising = (COS(Zenith*PiRads) - (sinDECrising * SIN(Latitude*PiRads))) / (cosDECrising * COS(Latitude*PiRads))cosHsetting = (COS(Zenith*PiRads) - (sinDECsetting * SIN(Latitude*PiRads))) / (cosDECsetting * COS(Latitude*PiRads))Out$ = "Sun Rises/Sets at: "IF (cosHrising >  1) THEN Out$ = "Sun never rises.":PRINT Out$IF (cosHrising < -1) THEN Out$ = "Sun never sets.":PRINT Out$IF debug%=1 THEN PRINT "Step 7a:"; cosHrising, cosHsetting' Step 7b. Finish calculating H and convert into HoursHrising = 360 - FN arcCos(cosHrising) /PiRadsHrising = Hrising / 15Hsetting = FN arcCos(cosHsetting) /PiRadsHsetting = Hsetting / 15IF debug%=1 THEN PRINT "Step 7b: ";Hrising, Hsetting' Step 8. Calculate local mean time of rising/settingTLOCrising = Hrising + RArising - (0.06571 * tRising) - 6.622TLOCsetting = Hsetting + RAsetting - (0.06571 * tSetting) - 6.622IF debug%=1 THEN PRINT "Step 8:"; TLOCrising, TLOCsetting' Step 9. Adjust back to UTCUTrising = TLOCrising - lngHourUTrising = FN fracMOD(UTrising, 24)UTsetting = TLOCsetting - lngHourUTsetting = FN fracMOD(UTsetting, 24)IF debug%=1 THEN PRINT "Step 9:"; UTrising, UTsetting' Step 10. Convert UT value to local time zone of latitude/longitudelocalTrising = UTrising + localOffsetlocalTsetting = UTsetting + localOffsetIF debug%=1 THEN PRINT "Step 10:";localTrising, localTsettingRETURN' Display Results"DisplayResults"' Convert the Decimal Hours into HOURS:MINUTES'A = ABS(localTrising) - FRAC(ABS(localTrising))B = FRAC(ABS(localTrising)) * 60 : B$=STR$(B)LONG IF VAL(B$)<10B$="0" + MID$(B$,2,1)XELSEB$ = MID$(B$,2,2)END IFlocalTrising$=STR$(A) + ":" + B$A = ABS(localTsetting) - FRAC(ABS(localTsetting))B = FRAC(ABS(localTsetting)) * 60 : B$=STR$(B)LONG IF VAL(B$)<10B$="0" + MID$(B$,2,1)XELSEB$ = MID$(B$,2,2)END IFlocalTsetting$=STR$(A) + ":" + B$PRINT Out$;IF (cosHrising > -1 AND cosHrising < 1) THEN PRINT localTrising$, localTsetting$RETURN